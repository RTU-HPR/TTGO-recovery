#ifndef _MQTT_SETTINGS_PAGE_H
#define _MQTT_SETTINGS_PAGE_H
#include <Arduino.h>
const PROGMEM char* MQTT_SETTINGS_PAGE = 
"<!DOCTYPE html>\n"
"<html lang=\"en\">\n"
"  <head>\n"
"    <title>MQTT Settings</title>\n"
"    <style>\n"
"      *,\n"
"      *:before,\n"
"      *:after {\n"
"        box-sizing: border-box;\n"
"      }\n"
"\n"
"      body {\n"
"        font-family: Arial, sans-serif;\n"
"        margin: 0;\n"
"        padding: 0;\n"
"        display: flex;\n"
"        justify-content: center;\n"
"        align-items: center;\n"
"        height: 100vh;\n"
"        background-color: #333;\n"
"        color: #fff;\n"
"      }\n"
"\n"
"      #settings {\n"
"        background-color: #444;\n"
"        padding: 30px;\n"
"        border-radius: 8px;\n"
"        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\n"
"        display: flex;\n"
"        flex-direction: column;\n"
"        align-items: center;\n"
"        width: 100%;\n"
"        max-width: 600px;\n"
"      }\n"
"\n"
"      h1 {\n"
"        margin: 0 0 20px;\n"
"        font-size: 2em;\n"
"        text-align: center;\n"
"      }\n"
"\n"
"      a {\n"
"        background-color: #4caf50;\n"
"        color: white;\n"
"        padding: 10px 20px;\n"
"        margin: 20px 0;\n"
"        border: none;\n"
"        cursor: pointer;\n"
"        font-size: 1em;\n"
"        border-radius: 4px;\n"
"        text-decoration: none;\n"
"        display: inline-block;\n"
"      }\n"
"\n"
"      a:hover {\n"
"        background-color: #45a049;\n"
"      }\n"
"\n"
"      label {\n"
"        font-weight: bold;\n"
"        font-size: 1.1em;\n"
"        margin-top: 10px;\n"
"      }\n"
"\n"
"      input {\n"
"        width: 100%;\n"
"        padding: 12px;\n"
"        margin: 10px 0 20px;\n"
"        border-radius: 4px;\n"
"        border: 1px solid #ccc;\n"
"        font-size: 1em;\n"
"        color: #fff;\n"
"        background-color: #555;\n"
"      }\n"
"\n"
"      button {\n"
"        background-color: #4caf50;\n"
"        color: white;\n"
"        padding: 12px;\n"
"        margin: 20px 0 0;\n"
"        border: none;\n"
"        cursor: pointer;\n"
"        font-size: 1em;\n"
"        border-radius: 4px;\n"
"        width: 100%;\n"
"      }\n"
"\n"
"      button:hover {\n"
"        background-color: #45a049;\n"
"      }\n"
"\n"
"      input:disabled {\n"
"        background-color: #777;\n"
"        cursor: not-allowed;\n"
"      }\n"
"\n"
"      @media (max-width: 800px) {\n"
"        #settings {\n"
"          width: 100%;\n"
"          padding: 20px;\n"
"        }\n"
"\n"
"        h1 {\n"
"          font-size: 1.5em;\n"
"        }\n"
"\n"
"        a,\n"
"        button {\n"
"          font-size: 1em;\n"
"        }\n"
"      }\n"
"\n"
"      .id-container {\n"
"        display: flex;\n"
"        align-items: center;\n"
"        width: 100%;\n"
"      }\n"
"\n"
"      #id {\n"
"        flex: 1;\n"
"      }\n"
"\n"
"      #generate-btn {\n"
"        background-color: #4caf50;\n"
"        color: white;\n"
"        padding: 8px;\n"
"        margin-left: 10px;\n"
"        border: none;\n"
"        cursor: pointer;\n"
"        font-size: 1em;\n"
"        border-radius: 4px;\n"
"        flex: 1;\n"
"        max-width: 180px;\n"
"      }\n"
"\n"
"      #generate-btn:hover {\n"
"        background-color: #45a049;\n"
"      }\n"
"      #status-indicator {\n"
"        width: 20px;\n"
"        height: 20px;\n"
"        border-radius: 50%;\n"
"        display: inline-block;\n"
"        margin-left: 10px;\n"
"      }\n"
"      .status-applied {\n"
"        background-color: #28a745; /* Green */\n"
"      }\n"
"      .status-not-applied {\n"
"        background-color: #dc3545; /* Red */\n"
"      }\n"
"    </style>\n"
"    <script>\n"
"      function sendPostRequest(url, value) {\n"
"        // Use the fetch function to send a POST request\n"
"        fetch(url, {\n"
"          method: \"POST\",\n"
"          headers: {\n"
"            \"Content-Type\": \"text/html charset=UTF-8\",\n"
"          },\n"
"          body: value,\n"
"        });\n"
"      }\n"
"      window.onload = function () {\n"
"        var button = document.getElementById(\"submit-btn\");\n"
"        var idField = document.getElementById(\"id\");\n"
"        const statusText = document.getElementById(\"status-text\");\n"
"        const statusIndicator = document.getElementById(\"status-indicator\");\n"
"\n"
"        // Fetch the initial values\n"
"        Promise.all([\n"
"          fetch(\"/serverDomain\")\n"
"            .then((response) => response.text())\n"
"            .then(\n"
"              (value) => (document.getElementById(\"serverDomain\").value = value)\n"
"            ),\n"
"          fetch(\"/username\")\n"
"            .then((response) => response.text())\n"
"            .then(\n"
"              (value) => (document.getElementById(\"username\").value = value)\n"
"            ),\n"
"          fetch(\"/password\")\n"
"            .then((response) => response.text())\n"
"            .then(\n"
"              (value) => (document.getElementById(\"password\").value = value)\n"
"            ),\n"
"          fetch(\"/topic\")\n"
"            .then((response) => response.text())\n"
"            .then((value) => (document.getElementById(\"topic\").value = value)),\n"
"          fetch(\"/port\")\n"
"            .then((response) => response.text())\n"
"            .then((value) => (document.getElementById(\"port\").value = value)),\n"
"          fetch(\"/id\")\n"
"            .then((response) => response.text())\n"
"            .then((value) => (idField.value = value)),\n"
"        ]).catch((error) => console.error(\"Error:\", error));\n"
"\n"
"        // Add an event listener for the click event\n"
"        button.addEventListener(\"click\", function (event) {\n"
"          // Prevent the button from submitting a form\n"
"          event.preventDefault();\n"
"\n"
"          // Send a POST request for each input field\n"
"          Promise.all([\n"
"            sendPostRequest(\n"
"              \"/serverDomain\",\n"
"              document.getElementById(\"serverDomain\").value\n"
"            ),\n"
"            sendPostRequest(\n"
"              \"/username\",\n"
"              document.getElementById(\"username\").value\n"
"            ),\n"
"            sendPostRequest(\n"
"              \"/password\",\n"
"              document.getElementById(\"password\").value\n"
"            ),\n"
"            sendPostRequest(\"/topic\", document.getElementById(\"topic\").value),\n"
"            sendPostRequest(\"/port\", document.getElementById(\"port\").value),\n"
"            sendPostRequest(\"/id\", idField.value),\n"
"          ]);\n"
"\n"
"          const userConfirmed = confirm(\n"
"            \"To apply the settings immediately, the system will reboot. On-screen data will be lost. Log on SD card will be preserved. Click OK to apply the settings now, click Cancel to apply the settings on the next boot.\"\n"
"          );\n"
"          if (userConfirmed) {\n"
"            Promise.all([sendPostRequest(\"/apply\", \"apply\")]).then(() => {\n"
"              //location.reload();\n"
"            });\n"
"          }\n"
"        });\n"
"\n"
"        // Add an event listener for the generate button click\n"
"        document\n"
"          .getElementById(\"generate-btn\")\n"
"          .addEventListener(\"click\", function () {\n"
"            fetch(\"/generateid\", {\n"
"              method: \"POST\",\n"
"              body: \"generateid\",\n"
"            })\n"
"              .then((response) => response.text())\n"
"              .then((value) => {\n"
"                document.getElementById(\"id\").value = value;\n"
"              })\n"
"              .catch((error) => console.error(\"Error:\", error));\n"
"          });\n"
"\n"
"        // Function to check the status of settings\n"
"        function checkSettingsStatus() {\n"
"          fetch(\"/settingsStatus\")\n"
"            .then((response) => response.json())\n"
"            .then((data) => {\n"
"              if (data == \"1\") {\n"
"                statusText.textContent = \"Settings Applied.\";\n"
"                statusIndicator.className = \"status-applied\";\n"
"              } else {\n"
"                statusText.textContent =\n"
"                  \"Settings Not Applied. Reboot Required.\";\n"
"                statusIndicator.className = \"status-not-applied\";\n"
"              }\n"
"            })\n"
"            .catch((error) => {\n"
"              console.error(\"Error:\", error);\n"
"              statusText.textContent = \"Settings Not Applied. Reboot Required.\";\n"
"              statusIndicator.className = \"status-not-applied\";\n"
"            });\n"
"        }\n"
"\n"
"        // Update the status indicator every 2.5 seconds\n"
"        setInterval(checkSettingsStatus, 2500);\n"
"      };\n"
"    </script>\n"
"  </head>\n"
"\n"
"  <body>\n"
"    <div id=\"settings\">\n"
"      <h1>MQTT Settings</h1>\n"
"      <a href=\"/radio.html\">Radio Settings</a>\n"
"      <label for=\"serverDomain\">Server Domain:</label>\n"
"      <input type=\"text\" id=\"serverDomain\" name=\"serverDomain\" />\n"
"      <label for=\"username\">Username:</label>\n"
"      <input type=\"text\" id=\"username\" name=\"username\" />\n"
"      <label for=\"password\">Password:</label>\n"
"      <input type=\"text\" id=\"password\" name=\"password\" />\n"
"      <label for=\"port\">Port:</label>\n"
"      <input type=\"number\" id=\"port\" name=\"port\" min=\"1\" max=\"65535\" />\n"
"      <label for=\"topic\">Topic:</label>\n"
"      <input type=\"text\" id=\"topic\" name=\"topic\" />\n"
"      <label for=\"id\">ID:</label>\n"
"      <div class=\"id-container\">\n"
"        <input type=\"text\" id=\"id\" name=\"id\" />\n"
"        <button id=\"generate-btn\" type=\"button\">Generate</button>\n"
"      </div>\n"
"      <div>\n"
"        <label>Status:</label>\n"
"        <span id=\"status-text\">Fetching. Please wait.</span>\n"
"        <div id=\"status-indicator\" class=\"status-not-applied\"></div>\n"
"      </div>\n"
"      <button id=\"submit-btn\">Apply Settings</button>\n"
"    </div>\n"
"  </body>\n"
"</html>\n";
#endif // _MQTT_SETTINGS_PAGE_H
